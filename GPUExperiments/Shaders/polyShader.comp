#version 430

//layout (local_size_x = 9, local_size_y = 4) in; 
layout (local_size_x = 1, local_size_y = 1) in; 

struct PolyVertex {
   vec4  location; 
   vec4  color; 
};

layout (std430, binding = 1) buffer VertexBuffer {
   PolyVertex verts [];
};

layout(std430, binding = 2) buffer ProgramState {
   uint currentTicks;
   uint previousTicks;
   uint totalElementCount;
   uint dirtyElementCount;
   uint floatSeriesStartIndex;
   uint intSeriesStartIndex;
   uint activeElementIds[];
};

struct Store {
   uint storeId;
   uint seriesType;
   uint seriesIndex;
   uint samplerIndex; 
};

struct Sampler {
   uint type;
   uint capacity;
   uint swizzleMap;
   uint neighborCount;
   vec4 strides;
   vec4 params0;
};

struct Composite {
   uint id;
   uint parentId;
   uint childIdsIndex;
   uint elementCount; 
   uint nestedElementCounts; 
   uint elementCapacity; 
   uint propTypes[32];
   Store propStores[32];
};


 vec4 gridSample(ivec4 rowCol, uint index)
 {
	float x = (index % rowCol.x) / (rowCol.x - 1.0f);
	float y = floor(index / rowCol.x) / (rowCol.y - 1.0f);
	return vec4(x,y,1,1);
 }
 vec4 hexGridSample(ivec4 rowCol, uint index)
 {
	uint yIndex = uint(floor(index / rowCol.x));
	float y = yIndex / (rowCol.y - 1.0f);
	float oddRow = mod(yIndex, 2 ) == 0 ? 0 : 1.0;
	float xStep = 1.0 / (rowCol.x - 1.0f);
	float x = (index % rowCol.x) * xStep + oddRow * xStep / 2.0;
	return vec4(x,y,1,1);
 }
 const float PI = 3.1415926535897932384626433832795;
 const float PIx2 = PI * 2.0f;    

 void main() 
 {
	uint index = uint(dot(gl_GlobalInvocationID, vec3(gl_WorkGroupSize.yz, 1)));
	
	ivec4 rowCol = ivec4(22, 22, 1, 1);
	int capacity = rowCol.x * rowCol.y * rowCol.z * rowCol.w;

	vec4 box = vec4(-0.8, -0.8, 0.8, 0.8);
	vec2 radius = vec2(0.04f, 0.04f);
	int sideCount = 6;

	uint startIndex = index * (sideCount * 3);
	vec4 offset4 = hexGridSample(rowCol, index);
	vec2 offset = mix(box.xy, box.zw, offset4.xy);

	float pt = float(sideCount - 1) / float(sideCount);
	float px = sin(pt * PIx2) * radius.x;
	float py = cos(pt * PIx2) * radius.y;
	for(int i = 0 ; i < sideCount; i++)
	{
		float t = i / float(sideCount);
		float x = sin(t * PIx2) * radius.x;
		float y = cos(t * PIx2) * radius.y;
		uint idx = startIndex + i * 3;
		verts[idx + 0].location = vec4(offset.x, offset.y, 0, 1.0);
		verts[idx + 1].location = vec4(x + offset.x, y + offset.y, 0, 1.0);
		verts[idx + 2].location = vec4(px + offset.x, py + offset.y, 0, 1.0);

		float indexT = index / float(capacity);
		float time = abs(mod(currentTicks, 97) / 48.5f - 1.0f);
		vec4 col;
		vec4 outColor;
		getLerp(2, indexT, col);
		getLerp(2, fract(indexT - currentTicks / 500.0f), outColor);
		verts[idx + 0].color =  vec4(col.xyz, 1.0);
		verts[idx + 1].color = outColor;
		verts[idx + 2].color = outColor;
		pt = t;
		px = x;
		py = y;
	}
 }